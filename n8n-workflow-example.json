{
  "name": "Conversation Analysis to Supabase",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 * * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Every Hour",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM followup WHERE created_at >= NOW() - INTERVAL '24 hours'",
        "additionalFields": {}
      },
      "id": "supabase-leads",
      "name": "Get Recent Leads",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 200],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM n8n_chat_histories WHERE created_at >= NOW() - INTERVAL '24 hours'",
        "additionalFields": {}
      },
      "id": "supabase-conversations",
      "name": "Get Recent Conversations",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 400],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Calcular métricas de análise\nconst leads = $input.first().json;\nconst conversations = $input.last().json;\n\n// Agrupar conversas por remotejID\nconst conversationsByLead = {};\nconversations.forEach(conv => {\n  const sessionId = conv.session_id;\n  if (!conversationsByLead[sessionId]) {\n    conversationsByLead[sessionId] = [];\n  }\n  conversationsByLead[sessionId].push(conv);\n});\n\n// Calcular métricas para cada lead\nconst analysisResults = [];\n\nleads.forEach(lead => {\n  const leadConversations = conversationsByLead[lead.remotejID] || [];\n  \n  // Calcular tempo médio de resposta (em horas)\n  let avgResponseTime = 0;\n  if (leadConversations.length > 0) {\n    const responseTimes = [];\n    for (let i = 1; i < leadConversations.length; i++) {\n      const prevTime = new Date(leadConversations[i-1].created_at);\n      const currTime = new Date(leadConversations[i].created_at);\n      const diffHours = (currTime - prevTime) / (1000 * 60 * 60);\n      responseTimes.push(diffHours);\n    }\n    avgResponseTime = responseTimes.length > 0 \n      ? responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length \n      : 0;\n  }\n\n  // Calcular taxa de conversão\n  const conversionRate = lead.encerrado ? 100 : 0;\n\n  // Calcular mensagens por lead\n  const avgMessagesPerLead = leadConversations.length;\n\n  // Calcular horários de pico\n  const hourlyActivity = {};\n  leadConversations.forEach(conv => {\n    const hour = new Date(conv.created_at).getHours();\n    hourlyActivity[hour] = (hourlyActivity[hour] || 0) + 1;\n  });\n  const peakActivityHours = Object.entries(hourlyActivity)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 3)\n    .map(([hour]) => parseInt(hour));\n\n  // Análise de palavras-chave (simplificada)\n  const allMessages = leadConversations.map(conv => {\n    const messageData = conv.message;\n    return messageData.content || messageData.text || '';\n  }).join(' ').toLowerCase();\n\n  const keywords = [\n    'consultoria', 'contrato', 'trabalhista', 'tributário', 'compliance',\n    'reunião', 'proposta', 'valor', 'serviço', 'empresa', 'direito',\n    'advogado', 'jurídico', 'cliente', 'negociação'\n  ];\n\n  const topKeywords = keywords.map(word => ({\n    word,\n    count: (allMessages.match(new RegExp(word, 'g')) || []).length\n  })).filter(kw => kw.count > 0).slice(0, 5);\n\n  // Análise de sentimento (simplificada)\n  const positiveWords = ['obrigado', 'perfeito', 'excelente', 'ótimo', 'bom'];\n  const negativeWords = ['problema', 'erro', 'ruim', 'péssimo', 'difícil'];\n  \n  let positive = 0, negative = 0, neutral = 0;\n  leadConversations.forEach(conv => {\n    const content = (conv.message.content || conv.message.text || '').toLowerCase();\n    const posCount = positiveWords.filter(word => content.includes(word)).length;\n    const negCount = negativeWords.filter(word => content.includes(word)).length;\n    \n    if (posCount > negCount) positive++;\n    else if (negCount > posCount) negative++;\n    else neutral++;\n  });\n\n  // Efetividade dos followups\n  const followupEffectiveness = {\n    followup1: lead.followup1 && !lead.followup2 ? (lead.encerrado ? 100 : 0) : 0,\n    followup2: lead.followup2 ? (lead.encerrado ? 100 : 0) : 0\n  };\n\n  analysisResults.push({\n    remotejID: lead.remotejID,\n    avg_response_time_hours: avgResponseTime,\n    conversion_rate: conversionRate,\n    avg_messages_per_lead: avgMessagesPerLead,\n    peak_activity_hours: peakActivityHours,\n    top_keywords: topKeywords,\n    sentiment_analysis: {\n      positive,\n      neutral,\n      negative\n    },\n    followup_effectiveness,\n    total_conversations: leadConversations.length\n  });\n});\n\nreturn analysisResults.map(result => ({ json: result }));"
      },
      "id": "process-analysis",
      "name": "Process Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": "conversation_analysis",
        "upsertKey": "remotejID",
        "columns": [
          "remotejID",
          "avg_response_time_hours",
          "conversion_rate",
          "avg_messages_per_lead",
          "peak_activity_hours",
          "top_keywords",
          "sentiment_analysis",
          "followup_effectiveness",
          "total_conversations"
        ]
      },
      "id": "supabase-upsert",
      "name": "Save Analysis",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    }
  ],
  "connections": {
    "Every Hour": {
      "main": [
        [
          {
            "node": "Get Recent Leads",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Recent Conversations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Leads": {
      "main": [
        [
          {
            "node": "Process Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Conversations": {
      "main": [
        [
          {
            "node": "Process Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Analysis": {
      "main": [
        [
          {
            "node": "Save Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}
